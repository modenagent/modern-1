<?php
    /**
     * The Library for the operations related to Report Generation.
     *
     * @author: Deependra Singh     
     * Date: Nov 30, 2016
     */
require 'vendor/autoload.php';

use Knp\Snappy\Pdf;
    class Reports {

        // constructor for the library to initialize the CI object
        public function __construct() {
            // initiating the CI object

        }
        
        private function _prepareMinMaxComparable($priceRate,&$firstTime,&$minPrice, &$maxPrice,&$tmp_property,&$tmp_lot_size, &$lotSize,&$min_lot_size,&$max_lot_size){
            if($firstTime){
                $minPrice = floatval($priceRate);
                $maxPrice = floatval($priceRate);

                $min_lot_size = $lotSize;
                $max_lot_size = $lotSize;  
                $firstTime = false;
            }
            if($minPrice>floatval($priceRate) ){
                $minPrice = floatval($priceRate);
            }
            if($maxPrice< floatval($priceRate)){
                $maxPrice = floatval($priceRate);
            }

            if($min_lot_size> $lotSize){
                $min_lot_size = $lotSize;
            }
            if($max_lot_size< $lotSize){
                $max_lot_size = $lotSize;
            }

            $tmp_property += $priceRate;         
            $tmp_lot_size += $lotSize;
        }
        
        function getPropertyData(){
            $CI = & get_instance();
            
            // loading library for pdf generation
            $CI->load->library('mpdf');

            // loading the required helper
            $CI->load->helper('dataapi');
            
            $rep111 = $_POST['report111'];
            $reportLang = $_POST['report_lang'];
            $compKeys = json_decode(stripslashes($_POST['custom_comps']));
            //$CI->lang->load('reports', $reportLang);
            $rep111 = urldecode($rep111);
            $report111 = @simplexml_load_file($rep111);
            
            $rep187 = $_POST['report187'];
            $rep187 = urldecode($rep187);
            $report187 = simplexml_load_file($rep187);

            $data['mapinfo'] = $report111;
            $data['property'] = $report187;

            $data['user'] = $_POST['user'];
            if($_POST['user_image'] != ''){
                $data['user']['profile_image'] = $_POST['user_image'];
            }
            if($_POST['company_image'] != ''){
                $data['user']['company_logo'] = $_POST['company_image'];
            }

            $data['partner'] =  array();
            if($_POST['showpartner']=='on'){
                $data['partner'] = $_POST['partner'];
                //$data['partner']['profile_image'] = $_POST['profile_image'];
                //$data['partner']['company_image'] = $_POST['p_company_logo'];
                $data['user_id_fk'] = $CI->session->userdata('userid');
                $CI->base_model->insert_one_row('lp_partner_details',$data['partner']);
                // $partnerData =  array('' => , );
            }
            $ownerNamePrimary = (string)$report187->PropertyProfile->PrimaryOwnerName;
            $ownerNameSecondary = (string)$report187->PropertyProfile->SecondaryOwnerName;
            if(strpos($ownerNamePrimary,";") !== FALSE){
                $_primeNameArr = explode(";", $ownerNamePrimary);
                $ownerNamePrimary = ucwords(trim($_primeNameArr[0]));
                if($ownerNameSecondary == ''){
                    $ownerNameSecondary = ucwords(trim($_primeNameArr[1]));
                }
            }
            if(strpos($ownerNamePrimary,",") !== FALSE){
                $_primeNameArr = explode(",", $ownerNamePrimary);
                //Setting Last name at last like for HERNANDEZ, GERARDO JOVANNI name will be GERARDO JOVANNI HERNANDEZ
                $ownerNamePrimary = ucwords(trim($_primeNameArr[1])) . ' ' . ucwords(trim($_primeNameArr[0]));
            }
            if(strpos($ownerNameSecondary,",") !== FALSE){
                $_secNameArr = explode(",", $ownerNameSecondary);
                //Setting Last name at last like for HERNANDEZ, GERARDO JOVANNI name will be GERARDO JOVANNI HERNANDEZ
                $ownerNameSecondary = ucwords(trim($_secNameArr[1])) . ' ' . ucwords(trim($_secNameArr[0]));
            }
            $data['primary_owner'] = $ownerNamePrimary;
            $data['secondary_owner'] = $ownerNameSecondary;
            $reportItems['comparable']=array();
            if(true || $_POST['presentation'] == 'seller') {
                $comparableTemp = $this->get_all_properties($report187);
                if(empty($compKeys)){
                    $comparables = $this->sort_properties($report187, $comparableTemp);
                    $reportItems['comparable'] = $comparables['sorted'];
                } else {
                    foreach($comparableTemp as $key => $_property){
                        if(in_array($key, $compKeys)){
                            array_push($reportItems['comparable'],$_property);
                        }
                    }
                }
            }
            $salesAnalysis = $this->sales_analysis($reportItems['comparable']);
            
            //unset($reportItems['comparableTemp']);
            //$reportItems['priceMinRange'] = round(($salesAnalysis['minPrice'] + ($salesAnalysis['minPrice']*5/100))/1000,2);
            //$reportItems['priceMaxRange'] = round(($salesAnalysis['maxPrice'] + ($salesAnalysis['maxPrice']*5/100))/1000,2);
            $reportItems['priceMinRange'] = round($salesAnalysis['minPrice']/1000,2);
            $reportItems['priceMaxRange'] = round($salesAnalysis['maxPrice']/1000,2);
 
            $propertyYear = (string)$report187->PropertyProfile->PropertyCharacteristics->YearBuilt[0];
            $reportItems['areaYear'] = $propertyYear;
            $reportItems['areaYearLow'] = minMaxArray('Year', 'min', $reportItems['comparable']);
            $reportItems['areaYearMedian'] = minMaxArray('Year', 'median', $reportItems['comparable']);
            $reportItems['areaYearHigh'] = minMaxArray('Year', 'max', $reportItems['comparable']);

            $reportItems['areaBedrooms'] = (string)$report187->PropertyProfile->PropertyCharacteristics->Bedrooms[0];
            $reportItems['areaBedroomsLow'] = minMaxArray('Beds', 'min', $reportItems['comparable']);
            $reportItems['areaBedroomsMedian'] = minMaxArray('Beds', 'median', $reportItems['comparable']);
            $reportItems['areaBedroomsHigh'] = minMaxArray('Beds', 'max', $reportItems['comparable']);

            $reportItems['areaBaths'] = (string)$report187->PropertyProfile->PropertyCharacteristics->Baths[0];
            $reportItems['areaBathsLow'] = minMaxArray('Baths', 'min', $reportItems['comparable']);
            $reportItems['areaBathsMedian'] = minMaxArray('Baths', 'median', $reportItems['comparable']);
            $reportItems['areaBathsHigh'] = minMaxArray('Baths', 'max', $reportItems['comparable']);
            
            $areaLotSize = number_format((string)$report187->PropertyProfile->PropertyCharacteristics->LotSize[0]);
            $areaLotSizeLow = number_format($salesAnalysis['min_lot_size']);             //number_format(minMaxArray('LotSize', 'min', $reportItems['comparable']));
            $areaLotSizeMedian = number_format($salesAnalysis['tmp_lot_size']/count($reportItems['comparable']));            //number_format(minMaxArray('LotSize', 'median', $reportItems['comparable']));
            $areaLotSizeHigh = number_format($salesAnalysis['max_lot_size']);                // number_format(minMaxArray('LotSize', 'max', $reportItems['comparable']));


            $reportItems['areaLotSize'] = $areaLotSize;
            $reportItems['areaLotSizeLow'] = $areaLotSizeLow;
            $reportItems['areaLotSizeMedian'] = $areaLotSizeMedian;
            $reportItems['areaLotSizeHigh'] = $areaLotSizeHigh;


            $areaLivingAreaLow = number_format(minMaxArray('BuildingArea', 'min', $reportItems['comparable']));
            $areaLivingAreaMedian = number_format(minMaxArray('BuildingArea', 'median', $reportItems['comparable']));
            $areaLivingAreaHigh = number_format(minMaxArray('BuildingArea', 'max', $reportItems['comparable']));

            $reportItems['areaLivingArea']   = (string)$report187->PropertyProfile->PropertyCharacteristics->BuildingArea[0];
            $reportItems['areaLivingAreaLow'] = $areaLivingAreaLow;
            $reportItems['areaLivingAreaMedian'] = $areaLivingAreaMedian;
            $reportItems['areaLivingAreaHigh'] = $areaLivingAreaHigh;

            $areaSalePriceLow = number_format((double)$report187->ComparableSalesReport->AreaSalesAnalysisInfo->PriceRangeMin);
            $areaSalePriceMedian = number_format((double)$report187->ComparableSalesReport->AreaSalesAnalysisInfo->MedianValue);
            $areaSalePriceHigh = number_format((double)$report187->ComparableSalesReport->AreaSalesAnalysisInfo->PriceRangeMax);

            $reportItems['areaPriceFoot'] = number_format((string)$report187->PropertyProfile->SaleLoanInfo->PricePerSQFT[0]);
            $reportItems['areaPriceFootLow'] = number_format(minMaxArray('PricePerSQFT', 'min', $reportItems['comparable']));
            $reportItems['areaPriceFootMedian'] = number_format(minMaxArray('PricePerSQFT', 'median', $reportItems['comparable']));
            $reportItems['areaPriceFootHigh'] = number_format(minMaxArray('PricePerSQFT', 'max', $reportItems['comparable']));

            $reportItems['areaSalePriceLow'] = dollars($areaSalePriceLow);
            $reportItems['areaSalePriceMedian'] = dollars($areaSalePriceMedian);
            $reportItems['areaSalePriceHigh'] = dollars($areaSalePriceHigh);

            $reportItems['areaTotalRoomsLow'] = minMaxArray('TotalRooms', 'min', $reportItems['comparable']);
            $reportItems['areaTotalRoomsMedian'] = minMaxArray('TotalRooms', 'median', $reportItems['comparable']);
            $reportItems['areaTotalRoomsHigh'] = minMaxArray('TotalRooms', 'max', $reportItems['comparable']);

            $reportItems['stories'] = (string)$report187->PropertyProfile->PropertyCharacteristics->NoOfStories[0];
            $propPool = $report187->PropertyProfile->PropertyCharacteristics->Pool[0];
                if ($propPool != 'Yes') {
                    $propPool = 'No';
                }
            $reportItems['propertyPool'] = number_format((double)$report187->PropertyProfile->PropertyCharacteristics->Pool[0]);
            $reportItems['propertyPoolLow'] = number_format((double)minMaxArray('Pool', 'min', $reportItems['comparable']));
            $reportItems['propertyPoolMedian'] = number_format((double)minMaxArray('Pool', 'median', $reportItems['comparable']));
            $reportItems['propertyPoolHign'] = number_format((double)minMaxArray('Pool', 'max', $reportItems['comparable']));

            $reportItems['propertySalePrice'] = number_format((double)$report187->PropertyProfile->SaleLoanInfo->SalesPrice);
            $reportItems['propertySalePriceLow'] =  number_format($salesAnalysis['minPrice']);       //number_format(minMaxArray('PriceRate', 'min', $reportItems['comparable']));
            $reportItems['propertySalePriceMedian'] =   number_format($salesAnalysis['tmp_property']/9); //number_format(minMaxArray('PriceRate', 'median', $reportItems['comparable']));
            $reportItems['propertySalePriceLowHigh'] =  number_format($salesAnalysis['maxPrice']);   //number_format(minMaxArray('PriceRate', 'max', $reportItems['comparable']));

            $areaSalesChart['series']='';
            $areaSalesChart['date']='';

            $minRadius = minMaxArray('Distance', 'min', $reportItems['comparable']);
            $medianRadius = minMaxArray('Distance', 'median', $reportItems['comparable']);
            $maxRadius = minMaxArray('Distance', 'max', $reportItems['comparable']);
            $reportItems['areaMinRadius'] = $minRadius;
            $reportItems['areaMedianRadius'] = $medianRadius;
            $reportItems['areaMaxRadius'] = $maxRadius;


            $ChartArr = array();
            $tmp2=array();
            //for ($i = 1; $i <= 12; $i++) {
            /*for ($i = 0; $i < 12; $i++) {
                  // $months[] = date("M Y", strtotime( date( 'Y-m-01' )." -$i months"));
                  //$months[] = array('date'=>date("M'y", strtotime( date( 'Y-m-01' )." -$i months")),'value'=>'_') ;   commented by vijay
                   $months[] = array('date'=>date("M'y", strtotime( date( 'Y-m-01' )." -$i months")),'value'=>'_') ;
            }*/

            $totalMonthsReport=0;       
            foreach ($reportItems['comparable'] as $key => $item) {
                /*****************************************/
                if($key > 8) break;
                $date=date_create($item['Date']);
                $tmepDate = date_format($date,"M'y");
                $months[] = array('date'=>$tmepDate,'value'=>$item['PriceRate']);
                /*foreach ($months as $key2 => $itemMonth) {
                    if($itemMonth['date']==$tmepDate){          
                        $months[$key2]['value'] = $item['PriceRate'];
                    }
                }*/
            }

            foreach ($months as $key => $itemMonth) {
                if($key<(sizeof($months)-1)){
                    $tmp2['date'].=$itemMonth['date'].'|';
                    $tmp2['series'].=$itemMonth['value'].',';
                }else{
                    $tmp2['date'].=$itemMonth['date'];
                    $tmp2['series'].=$itemMonth['value'];
                }
                if($itemMonth['value']!='_'){
                    $totalMonthsReport++;
                }
                array_push($ChartArr, $tmp2);
            }

            
            $tmp2['color'] = str_replace("#", "", $CI->input->post('theme'));
            $reportItems['chart']=$tmp2;
            $reportItems['totalMonthsReport'] = $totalMonthsReport;
            $data['areaSalesAnalysis'] = $reportItems;
            $data['theme'] = $CI->input->post('theme');
            if(!isset($reportLang)){
                $reportLang = 'english';
            }
            if($_POST['presentation'] == 'buyer') {
                if($CI->session->userdata('user_email')=='developer.avtargaur@gmail.com'){
                    $html = $CI->load->view("reports/v2/index",$data,true);
                } else {
                    $html = $CI->load->view("reports/".$reportLang."/pdf_template_bp",$data,true);
                }
                //$html=str_replace("80a7b7", str_replace('#','',$CI->input->post('theme')), $html);        
            } else {
                $html = $CI->load->view("reports/".$reportLang."/pdf_template",$data,true);
                //$html=str_replace("f15d3e", str_replace('#','',$CI->input->post('theme')), $html);        
            }
            if($_POST['presentation'] == 'buyer' && $CI->session->userdata('user_email')=='developer.avtargaur@gmail.com') {
                $wkhtmltopdfPath =  $CI->config->item('wkhtmltopdf_path'); //echo $wkhtmltopdfPath;die;
                $snappy = new Pdf($wkhtmltopdfPath);
                //$snappy = new Pdf($this->binaryPath);
                $options = [
                    'margin-top'    => 0,
                    'margin-right'  => 0,
                    'margin-bottom' => 0,
                    'margin-left'   => 0,
		    'zoom'	    => 1.29,
                ];
                //file_put_contents("tmp.html", $html);die;

                $pdfFileName = 'temp/'.$report187->PropertyProfile->SiteAddress.'_'.uniqid().'.pdf';
//echo $pdfFileName;die;
                $output = $snappy->getOutputFromHtml($html, $options,
                            200,
                            array(
                                'Content-Type'          => 'application/pdf',
                                'Content-Disposition'   => 'attachment; filename="report.pdf"'
                            ));
                $pdfFileName = 'temp/'.$report187->PropertyProfile->SiteAddress.'_'.uniqid().'.pdf';
                file_put_contents($pdfFileName, $output);
echo $pdfFileName;
            } else {
            
                $mpdf=new mPDF('','Letter','','',0,0,0,0,0,0);

                $mpdf->WriteHTML($html);
                $pdfFileName = 'temp/'.$report187->PropertyProfile->SiteAddress.'_'.uniqid().'.pdf';
                $mpdf->Output($pdfFileName,'F'); 
            }

            $insertPdfReport =  array(
                                        'project_name'=>$CI->db->escape_str($report187->PropertyProfile->SiteAddress),
                                        'report_path'=>$pdfFileName,
                                        'user_id_fk'=>$CI->session->userdata('userid'),
                                        'property_owner'=>$CI->db->escape_str($report187->PropertyProfile->PrimaryOwnerName),
                                        'property_address'=>$CI->db->escape_str($report187->PropertyProfile->SiteAddress.', '.$report187->PropertyProfile->SiteCity.' '.$report187->PropertyProfile->SiteState.' '.$report187->PropertyProfile->SiteZip),
                                        'property_apn'=>$CI->db->escape_str($report187->PropertyProfile->APN),
                                        'property_lat'=>$CI->db->escape_str($report187->PropertyProfile->PropertyCharacteristics->Latitude),
                                        'property_lng'=>$CI->db->escape_str($report187->PropertyProfile->PropertyCharacteristics->Longitude),
                                        'report_type'=>$_POST['presentation'],
                                );

            $CI->base_model->insert_one_row('lp_my_listing', $insertPdfReport);
            $CI->session->set_userdata('project_id', $CI->base_model->get_last_insert_id());
            // $CI->load->view('pdf_template');
        }
        function get_all_properties($report187){
            $_comparableTemp = array();
            $index = 0;  
            for ($j = 0; $j < sizeof($report187->ComparableSalesReport->ComparableSales->ComparableSale); $j++) {
                // echo $report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->Proximity[0]. '<= 0.2 <br >';
                // if(sizeof($reportItems['comparableTemp'])<9){
                $proximity_val = $report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->Proximity[0].'';
                $build_area = (string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->BuildingArea[0].'';
                if(floatval($proximity_val)<=2 ){ //&& ($minBuildArea<=floatval($build_area)) && ($maxBuildArea>=floatval($build_area)) && $months_diff<=12
                    $i = strval($j + 1);
                    $tmp['index'] = $index++;
                    $tmp['Date'] = formatDate((string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->RecordingDate[0]);
                    $tmp['Price'] = dollars(number_format((string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->SalePrice[0]));
                    $tmp['PriceRate'] = (string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->SalePrice[0];
                    $tmp['PricePerSQFT']=(string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->PricePerSQFT[0];
                    $tmp['TotalRooms']=(string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->TotalRooms[0];

                    $tmp['Address'] = properCase((string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->SiteAddress[0].' '.$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->SiteCity[0]);
                    $tmp['Distance'] = floatval((string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->Proximity[0]) ;
                    $tmp['Beds'] = number_format((string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->Bedrooms[0]);
                    $tmp['SquareFeet'] = number_format((string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->BuildingArea[0]);
                    $tmp['BuildingArea'] = (string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->BuildingArea[0].'';
                    $tmp['Baths'] = (int)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->Baths[0];
                    $tmp['Bedrooms'] = (int)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->Bedrooms[0];
                    $tmp['Year'] = (string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->YearBuilt[0];
                    $tmp['LotSize'] = number_format((string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->LotSize);
                    $tmp['Latitude'] = (string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->Latitude;
                    $tmp['Longitude'] = (string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->Longitude;
                    $tmpPool = (string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->Pool[0];
                    if ($tmpPool != 'Yes') {
                        $tmpPool = 'No';
                    }           
                    $tmp['Pool']=$tmpPool;
                    //$apn= (string)$report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->APN[0].'';
                    array_push($_comparableTemp, $tmp);               
                    //array_push($hasComparable, $apn);
                }
            }
            return $_comparableTemp;
        }
        function sort_properties($report187,$_comparableTemp){
            $comparable = array();
            // print_r($reportItems['comparableTemp']);

            //********* COmpare ale property Sold in last 12 months ************/
            //COmpare ale property +-20 % of build area
            //$reportItems['comparableTempSold'] = array();
            $date = new DateTime();
            $currentdate = $date->format('m/d/Y');
            $months_diff  = monthsBetween(formatDate($report187->ComparableSalesReport->ComparableSales->ComparableSale[$j]->RecordingDate[0]),$currentdate); 
            $minBuildArea = (floatval($report187->PropertyProfile->PropertyCharacteristics->BuildingArea)*80/100);//-20%
            $maxBuildArea = (floatval($report187->PropertyProfile->PropertyCharacteristics->BuildingArea)*120/100);//+20%
            $maxBedrooms = (int)$report187->PropertyProfile->PropertyCharacteristics->Bedrooms+1;//+1
            $minBedrooms = (int)$report187->PropertyProfile->PropertyCharacteristics->Bedrooms-1;//-1
            $maxBaths = (int)$report187->PropertyProfile->PropertyCharacteristics->Baths+1;//+1
            $minBaths = (int)$report187->PropertyProfile->PropertyCharacteristics->Baths-1;//-1
            $maxLotSize = (floatval($report187->PropertyProfile->PropertyCharacteristics->LotSize)*120/100);//+20%
            $minLotSize = (floatval($report187->PropertyProfile->PropertyCharacteristics->LotSize)*20/100);//-20%
            $maxPricePerSQFT = (floatval($report187->PropertyProfile->SaleLoanInfo->PricePerSQFT)*120/100);//+20%
            $minPricePerSQFT = (floatval($report187->PropertyProfile->SaleLoanInfo->PricePerSQFT)*80/100);//+20%
            $count = 0;
            foreach ($_comparableTemp as $key => $compareableProperty) {
                if($count++ > 8) break;
                $months_diff  = monthsBetween($compareableProperty['Date'],$currentdate); 
                $build_area  = floatval(str_replace(",","",$compareableProperty['BuildingArea'])); 
                $bedrooms  = (int)$compareableProperty['Bedrooms'];
                $baths  = (int)$compareableProperty['Baths']; 
                $lotSize  = floatval(str_replace(",","",$compareableProperty['LotSize'])); 
                $pricePerSQFT  = floatval(str_replace(",","",$compareableProperty['PricePerSQFT']));
                if($months_diff<=12 && ($minBuildArea<=$build_area && $maxBuildArea>=$build_area) && ($minBedrooms<=$bedrooms && $maxBedrooms>=$bedrooms) && ($minBaths<=$baths && $maxBaths>=$baths) && 
                        ($minLotSize<=$lotSize && $maxLotSize>=$lotSize) && ($minPricePerSQFT<=$pricePerSQFT && $maxPricePerSQFT>=$pricePerSQFT)){
                    array_push($comparable, $compareableProperty);               
                    unset($_comparableTemp[$key]);
                }
            }
            //If comaparable sales count is not 9 then we need to fill remaning from parent set without any conditions
            $_count = count($comparable);
            //echo "Actual Count:".$countComparables;
            if($_count!=9){
                foreach ($_comparableTemp as $key => $compareableProperty) {
                    $months_diff  = monthsBetween($compareableProperty['Date'],$currentdate); 
                    $build_area  = floatval(str_replace(",","",$compareableProperty['BuildingArea'])); 
                    $bedrooms  = (int)$compareableProperty['Bedrooms'];
                    $baths  = (int)$compareableProperty['Baths']; 
                    $pricePerSQFT  = floatval(str_replace(",","",$compareableProperty['PricePerSQFT'])); 
                    if($months_diff<=12 && ($minBuildArea<=$build_area && $maxBuildArea>=$build_area) && ($minBedrooms<=$bedrooms && $maxBedrooms>=$bedrooms) && ($minBaths<=$baths && $maxBaths>=$baths) && 
                            ($minPricePerSQFT<=$pricePerSQFT && $maxPricePerSQFT>=$pricePerSQFT)){
                        array_push($comparable, $compareableProperty);               
                        unset($_comparableTemp[$key]);
                        if(++$_count == 9) break;
                    }
                }
            }
            if($_count!=9){
                foreach ($_comparableTemp as $key => $compareableProperty) {
                    $months_diff  = monthsBetween($compareableProperty['Date'],$currentdate); 
                    $build_area  = floatval(str_replace(",","",$compareableProperty['BuildingArea'])); 
                    $bedrooms  = (int)$compareableProperty['Bedrooms'];
                    $pricePerSQFT  = floatval(str_replace(",","",$compareableProperty['PricePerSQFT'])); 
                    if($months_diff<=12 && ($minBuildArea<=$build_area && $maxBuildArea>=$build_area) && ($minBedrooms<=$bedrooms && $maxBedrooms>=$bedrooms) && ($minPricePerSQFT<=$pricePerSQFT && $maxPricePerSQFT>=$pricePerSQFT)){
                        array_push($comparable, $compareableProperty);               
                        unset($_comparableTemp[$key]);
                        if(++$_count == 9) break;
                    }
                }
            }
            if($_count!=9){
                foreach ($_comparableTemp as $key => $compareableProperty) {
                    $months_diff  = monthsBetween($compareableProperty['Date'],$currentdate); 
                    $build_area  = floatval(str_replace(",","",$compareableProperty['BuildingArea'])); 
                    $pricePerSQFT  = floatval(str_replace(",","",$compareableProperty['PricePerSQFT'])); 
                    if($months_diff<=12 && ($minBuildArea<=$build_area && $maxBuildArea>=$build_area) && ($minPricePerSQFT<=$pricePerSQFT && $maxPricePerSQFT>=$pricePerSQFT)){
                        array_push($comparable, $compareableProperty);               
                        unset($_comparableTemp[$key]);
                        if(++$_count == 9) break;
                    }
                }
            }
            if($_count!=9){
                foreach ($_comparableTemp as $key => $compareableProperty) {
                    $months_diff  = monthsBetween($compareableProperty['Date'],$currentdate); 
                    $pricePerSQFT  = floatval(str_replace(",","",$compareableProperty['PricePerSQFT'])); 
                    if($months_diff<=12 && ($minPricePerSQFT<=$pricePerSQFT && $maxPricePerSQFT>=$pricePerSQFT)){
                        array_push($comparable, $compareableProperty);               
                        unset($_comparableTemp[$key]);
                        if(++$_count == 9) break;
                    }
                }
            }
            if($_count!=9){
                foreach ($_comparableTemp as $key => $compareableProperty) {
                    $months_diff  = monthsBetween($compareableProperty['Date'],$currentdate); 
                    if($months_diff<=12){
                        array_push($comparable, $compareableProperty);               
                        unset($_comparableTemp[$key]);
                        if(++$_count == 9) break;
                    }
                }
            }
            if($_count!=9){
                foreach ($_comparableTemp as $key => $compareableProperty) {
                    array_push($comparable, $compareableProperty);               
                    unset($_comparableTemp[$key]);
                    if(++$_count == 9) break;
                }
            }
            return array('sorted'=>$comparable,'all'=>$_comparableTemp);
        }
        function sales_analysis($sortedComps){
            $firstTime = true;
            $tmp_property = 0; $min_tmp_price = 0; $max_tmp_price = 0;
            $tmp_lot_size = 0; $min_lot_size = 0; $max_lot_size = 0; $minPrice = $maxPrice = $count = 0;
            foreach ($sortedComps as $compareableProperty) {
                $lotSize  = floatval(str_replace(",","",$compareableProperty['LotSize'])); 
                $this->_prepareMinMaxComparable($compareableProperty['PriceRate'],$firstTime,$minPrice, $maxPrice,$tmp_property,$tmp_lot_size, $lotSize,$min_lot_size,$max_lot_size);
            }
            $result = array('minPrice'=>$minPrice, 'maxPrice'=>$maxPrice,'tmp_property'=>$tmp_property,'min_lot_size'=>$min_lot_size,'max_lot_size'=>$max_lot_size,'tmp_lot_size'=>$tmp_lot_size);
            return $result;
        }
    }
?>
