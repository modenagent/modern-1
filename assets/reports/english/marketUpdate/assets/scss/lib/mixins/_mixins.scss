// mixins.scss
// contains all the mixins used
// ----------------------------------------------------------------------------------------

@import "clearfix";

// `Helpers
// remove unit
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

// add unit
@function add-unit( $num, $unit: px) {
    @return ($num + $unit);
}

// clean-unit
@function handle-unit($num) {
    @if unitless($num) {
        @return add-unit( $num);
    }
    @else {
        @return $num;
    }
}

/// Mixin helper to output vendor-prefixed CSS. Not required if using prefixr API
@mixin prefix($property, $value, $prefixes: ()) {
    @each $prefix in $prefixes {
        -#{$prefix}-#{$property}: $value;
    }
    #{$property}: $value;
}

// -----------------------------------------------------------
// `Conversions:
// px to em
@function emify($target, $context) {
    @if $target==0 {
        @return 0
    }
    @return $target / $context + 0em;
}

@function em($target, $context: 10) {
    @if $target==0 {
        @return 0
    }
    @return $target / $context + 0em;
}

// Make px to ems using base-font-size
// echo as: font-size: em-font(#px);
@function em-font($target, $context: $base-font-size) {
    @return emify($target, $context);
}

// Make px to ems using base-line-height
// echo as: font-size: em-base(#px);
@function em-base($target, $context: $base-line-height) {
    @return emify($target, $context);
}

// px to rem
@function remify($pxSize) {
    $remSize: $pxSize / $base-font-size;
    @return #{$remSize}rem;
}

// HEX to RGBA
@mixin rgba($color, $value) {
    background-color: $color;
    background-color: rgba($color, $value);
}

// Rem fallback approach by Karl Merkli edited by Arsal Khan. It now takes values in px convert in rems and put a pixel fallback.
// @include rf(margin, 10, 20, 30, 40); // property-value pair
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}

@mixin rf($property, $values...) {
    $max: length($values);
    $pxValues: '';
    $remValues: '';
    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $pxValues: #{$pxValues + $value}px;
        @if $i < $max {
            $pxValues: #{$pxValues + " "};
        }
    }
    @for $i from 1 through $max {
        $value: strip-unit(nth($values, $i));
        $remValues: #{$remValues + $value/10}rem;
        @if $i < $max {
            $remValues: #{$remValues + " "};
        }
    }
    #{$property}: $pxValues;
    #{$property}: $remValues;
}

@function remify($pxSize) {
    $remSize: $pxSize / 10;
    @return #{$remSize}rem;
}

// ----------------------------------------------------------
// `Media
// Arrows
@mixin createArrow($size:5px, $direction:up, $color: $primary-color) {
    border-width: $size;
    border-color: transparent;
    border-style: solid;
    display: inline-block;
    height: 0px;
    width: 0px;
    @if $direction==up {
        border-bottom-color: $color;
        border-top-width: 0px;
    }
    @else if $direction==right {
        border-left-color: $color;
        border-right-width: 0px;
    }
    @else if $direction==down {
        border-top-color: $color;
        border-bottom-width: 0px;
    }
    @else if $direction==left {
        border-right-color: $color;
        border-left-width: 0px;
    }
}


// png sprite(the old sschool way)
@mixin createIcon($width, $height, $background-pos: '0 0', $pseudo: '') {
    // when the icon is used in a separate tag, ie, i.icon or span.icon
    @if $pseudo=='' {
        background: transparent url('#{$mainSprite}') no-repeat;
        background-position: $background-pos;
        width: $width;
        height: $height;
        display: inline-block;
        vertical-align: top;
        zoom: 1;
        /* Fix for IE7 */
        *display: inline;
        /* Fix for IE7 */
    }
    // when used with pseudo element :before or :after
    @if $pseudo !='' {
        &:#{$pseudo} {
            background: transparent url('#{$mainSprite}') no-repeat;
            background-position: $background-pos;
            width: $width;
            height: $height;
            display: inline-block;
            vertical-align: top;
            zoom: 1;
            /* Fix for IE7 */
            *display: inline;
            /* Fix for IE7 */
            content: '';
            padding-left: $width + 5px;
            /* adding space from left */
        }
    }
}

// Cross browser opacity
// @mixin opacity($opacity) {
//     opacity: $opacity;
//     $opacity-ie: $opacity * 100;
//     filter: alpha(opacity=$opacity-ie); //IE8
//     -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$opacity * 100})";
// }


@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}


@mixin background-gradient($start-color,
$end-color,
$orientation) {
    background: $start-color;
    @if $orientation=='vertical' {
        background: -webkit-linear-gradient(top, $start-color, $end-color);
        background: linear-gradient(to bottom, $start-color, $end-color);
    }
    @else if $orientation=='horizontal' {
        background: -webkit-linear-gradient(left, $start-color, $end-color);
        background: linear-gradient(to right, $start-color, $end-color);
    }
    @else {
        background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
        background: radial-gradient(ellipse at center, $start-color, $end-color);
    }
}

//-------------------------------------------------------------
// `Structure 
// Box sizing
@mixin box-sizing($type: border-box) {
    box-sizing: #{$type};
}

// Box-shadow
@mixin box-shadow( $horiz: .5em,
$vert: .5em,
$blur: 0px,
$spread: 0px,
$color: #000000) {
    // -webkit-box-shadow: $horiz $vert $blur $spread $color;
    // -moz-box-shadow: $horiz $vert $blur $spread $color;
    // box-shadow: $horiz $vert $blur $spread $color;
    @include prefix('box-shadow',
    $horiz $vert $blur $spread $color,
    'webkit' 'moz');
}

// ----------------------------------------------------------
// `Alignment
// place element in center of the container; 
@mixin old-school-center($width,
$height) {
    width: $width;
    height: $height;
    position: absolute;
    top: 50%;
    left: 50%;
    margin-top: -($height/2);
    margin-left: -($width/2);
}

// Center align anything
@mixin center ( $direction: both,
$dim1: null,
$dim2: $dim1) {
    // if no direction is set, center align from both horizontal and vertical
    @if $direction==both {
        position: absolute;
        left: 50%;
        top: 50%;
        transform:
        translate(-50%,
        -50%);
        @if $dim1 and $dim2 {
            $width: $dim1;
            $height: $dim2;
            width: $width;
            height: $height;
            @include ie {
                /* fallback for ie that doesn't support translate */
                margin-left: -($width/2);
                margin-top: -($height/2);
            }
        }
    }
    @else {
        // check the direction
        @if $direction==y {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            @if $dim1 {
                $height: $dim1;
                height: $height;
                @include ie {
                    /* fallback for ie that doesn't support translate */
                    margin-top: -($height/2);
                }
            }
        }
        // for horizontal
        @else if $direction==x {
            @if $dim1 {
                width: $dim1;
                display: block;
                margin-right: auto;
                margin-left: auto;
                float: none;
            }
            @else {
                display: table;
                margin-right: auto;
                margin-left: auto;
                float: none;
            }
        }
    }
}

// @center
// ----------------------------------------------------------
// `Borders
@mixin border-radius($radius) {
    -webkit-border-radius: $radius;
    border-radius: $radius;
    background-clip: padding-box;
    /* stops bg color from leaking outside the border: */
}

@mixin border-radius-separate($top-left-radius,
$top-right-radius,
$bottom-right-radius,
$bottom-left-radius) {
    border-top-left-radius: #{$top-left-radius};
    border-top-right-radius: #{$top-right-radius};
    border-bottom-left-radius: #{$bottom-left-radius};
    border-bottom-right-radius: #{$bottom-right-radius};
}

// Single side border-radius
@mixin border-top-radius($radius) {
    border-top-right-radius: $radius;
    border-top-left-radius: $radius;
    background-clip: padding-box;
}

@mixin border-right-radius($radius) {
    -webkit-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
    -webkit-border-top-right-radius: $radius;
    border-top-right-radius: $radius;
    background-clip: padding-box;
}

@mixin border-bottom-radius($radius) {
    -webkit-border-bottom-right-radius: $radius;
    border-bottom-right-radius: $radius;
    -webkit-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
    background-clip: padding-box;
}

@mixin border-left-radius($radius) {
    -webkit-border-bottom-left-radius: $radius;
    border-bottom-left-radius: $radius;
    -webkit-border-top-left-radius: $radius;
    border-top-left-radius: $radius;
    background-clip: padding-box;
}


@mixin multiple-borders ($width: 1px, $clr: #000) {
    box-shadow: 0 0 0 $width $clr;
}

// ----------------------------------------------------------
// `Typography
// Add font-face the old school way
@mixin font-face($font: $primary-font,
$font_file: $font,
$weight: normal,
$style: normal) {
    @font-face {
        font-family: $font;
        src: url('#{$path_fonts}/#{$font_file}.eot');
        src: url('#{$path_fonts}/#{$font_file}.eot?#iefix') format('embedded-opentype'),
        url('#{$path_fonts}/#{$font_file}.woff') format('woff'),
        url('#{$path_fonts}/#{$font_file}.ttf') format('truetype'),
        url('#{$path_fonts}/#{$font_file}.svg##{$font}') format('svg');
        font-weight: $weight;
        font-style: $style;
    }
    @media screen and (-webkit-min-device-pixel-ratio:0) {
        @font-face {
            font-family: $font;
            src: url('#{$path_fonts}/#{$font_file}.svg##{$font}') format('svg');
        }
    }
}

// Simple fallback for font-size for older browsers
@mixin font-size($pxSize) {
    $num: strip-unit($pxSize);
    font-size: $num + px; //Fallback in px
    font-size: remify($num);
}

/// Embossing text shadow
/// @access public
/// @param {Float} $value - Opacity value
/// @example scss - Usage
///   .foo {
///     @include text-shadow(0.5);
///   }
/// @example css - Result
///   .foo {
///     text-shadow: rgba(255, 255, 255, 0.5) 0 1px 0;
///   }
@mixin text-shadow($value) {
    text-shadow: rgba(255, 255, 255, $value) 0 1px 0;
}

// ----------------------------------------------------------
// `Responsive
@function mobile-first() {
    @if ($mobile_first_approach) {
        @return 'min-width';
    }
    @else {
        @return 'max-width';
    }
}

@mixin breakpoint ( $arg1: null,
$arg2: null) {
    $width_break: mobile-first();
    // Change min-width to max-width if not using mobile-first approach, the default is tablet
    @if ($arg1) {
        // if the argument is set
        @if type-of($arg1)=="number" {
            // if the argument is a number
            @if not ($arg2) {
                @media only screen and (#{$width_break}: $arg1) {
                    @content;
                }
            }
            @else {
                @media only screen and (min-width: $min) and ( max-width: $max) {
                    @content;
                }
            }
        }
        @else if type-of($arg1)=="string" {
            // if the argument is string, we are talking about device based breakpoints
            $model: $arg1;
            $orientation: $arg2;
            // iphone4s
            @if $model=='iphone4s' {
                // portrait        
                @if $orientation=='portrait' {
                    @media only screen and (min-device-width: 320px) and (max-device-width: 480px) and (-webkit-min-device-pixel-ratio: 2) and (orientation: portrait) {
                        @content;
                    }
                }
                // iphone 4/4s landscape
                @else if $orientation=='landscape' {
                    @media only screen and (min-device-width: 320px) and (max-device-width: 480px) and (-webkit-min-device-pixel-ratio: 2) and (orientation: landscape) {
                        @content;
                    }
                }
                // both
                @else {
                    @media only screen and (min-device-width: 320px) and (max-device-width: 480px) and (-webkit-min-device-pixel-ratio: 2) {
                        @content;
                    }
                }
            } // /iphone4s
            @else if $model=='iphone5s' {
                // iphone 5/5s portrait
                @if $orientation=='portrait' {
                    @media only screen and (min-device-width: 320px) and (max-device-width: 568px) and (-webkit-min-device-pixel-ratio: 2) and (orientation: portrait) {
                        @content;
                    }
                }
                // iphone 5/5s landscape
                @else if $orientation=='landscape' {
                    @media only screen and (min-device-width: 320px) and (max-device-width: 568px) and (-webkit-min-device-pixel-ratio: 2) and (orientation: landscape) {
                        @content;
                    }
                }
                // both landscape and portrait by default
                @else {
                    @media only screen and (min-device-width: 320px) and (max-device-width: 568px) and (-webkit-min-device-pixel-ratio: 2) {
                        @content;
                    }
                }
            } // /iphone5s
            @else if $model=='iphone6' {
                // iphone 6 portrait
                @if $orientation=='portrait' {
                    @media only screen and (min-device-width: 375px) and (max-device-width: 667px) and (-webkit-min-device-pixel-ratio: 2) and (orientation: portrait) {
                        @content;
                    }
                }
                // iphone 6 landscape
                @else if $orientation=='landscape' {
                    @media only screen and (min-device-width: 375px) and (max-device-width: 667px) and (-webkit-min-device-pixel-ratio: 2) and (orientation: landscape) {
                        @content;
                    }
                }
                // both landscape and portrait by default for iphone 6
                @else {
                    @media only screen and (min-device-width: 375px) and (max-device-width: 667px) and (-webkit-min-device-pixel-ratio: 2) {
                        /* iphone6 */
                        @content;
                    }
                }
            } // /iphone6
            // both landscape and portrait by default for iphone 6 plus
            @elseif $model=='iphone6plus' {
                // iphone 6 plus portrait
                @if $orientation=='portrait' {
                    @media only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: portrait) {
                        @content;
                    }
                }
                // iphone 6 plus landscape
                @else if $orientation=='landscape' {
                    @media only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {
                        @content;
                    }
                }
                @else {
                    @media only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) {
                        @content;
                    }
                }
            } // /iphone6plus
            // both landscape and portrait by default for iphone 6 plus
            @elseif $model=='xs-only' {
                @media only screen and (max-width: #{$xs}) {
                    @content;
                }
            } // /xs-only
            @elseif $model=='xs-sm' {
                @media only screen and (max-width: #{$md}) {
                    @content;
                }
            } // /xs and sm
            @elseif $model=='sm-only' {
                @media only screen and (min-width: 768px) and (max-width: 991px) {
                    @content;
                }
            } // /sm-only
            @elseif $model=='sm-md' {
                @media only screen and (min-width: #{$sm}) and (max-width: #{$lg}) {
                    @content;
                }
            } // /sm and medium
            @elseif $model=='md-only' {
                @media only screen and (min-width: #{$sm}) and (max-width: #{$md}) {
                    @content;
                }
            } // /sm-only
            @elseif $model=='lg-only' {
                @media only screen and (min-width: #{$lg}) {
                    @content;
                }
            } // /xs-only
        }
    }
    @else {
        // if nothing passed, check mobilefirst or desktop first and do accordingly
        @if ($mobile_first_approach) {
            @media only screen and (#{$width_break}: $sm) {
                @content;
            }
        }
        @else {
            @media only screen and (#{$width_break}: $md) {
                @content;
            }
        }
    }
}


// --------------------------------------
// User Interaction
// keyframes
@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }  
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }  
    @keyframes #{$animation-name} {
        @content;
    }
}

@mixin animation($str) {
  -webkit-animation: #{$str};
  -moz-animation: #{$str};
  -ms-animation: #{$str};
  -o-animation: #{$str};
  animation: #{$str};      
}
@mixin fade($fade-from: 0,
$fade-to: 1,
$animation-properties: 1s ease) {
    $alias: fade- + str-replace($fade-from + '', '.', '-') + '-' + str-replace($fade-to + '', '.', '-');
    @include keyframes($alias) {
        from {
            @include opacity($fade-from);
        }
        to {
            @include opacity($fade-to);
        }
    }
    @include prefix(animation,
    $alias $animation-properties,
    'webkit');
}



// mixin for ie versions
@mixin ie($version: "ie8") {
    .lt-ie9 &,
    .ie-8 & {
        @content;
    }
}

// Responsive utilities
//
// More easily include all the states for responsive-utilities.less.
// [converter] $parent hack
@mixin responsive-visibility($parent) {
    #{$parent} {
        display: block !important;
    }
    table#{$parent} {
        display: table;
    }
    tr#{$parent} {
        display: table-row !important;
    }
    th#{$parent},
    td#{$parent} {
        display: table-cell !important;
    }
}

// [converter] $parent hack
@mixin responsive-invisibility($parent) {
    #{$parent} {
        display: none !important;
    }
}

// use in ul
// disc (• • •)
// circle (○ ○ ○)
// square (▪ ▪ ▪)
// decimal (1 2 3)
// decimal-leading-zero (01, 02, 03)
// lower-roman (i ii iii)
// upper-roman (I II III)
// lower-greek (α β γ)
// lower-latin (a b c)
// upper-latin (A B C)
// armenian (Ա Բ Գ)
// georgian (ა ბ გ)
// lower-alpha (a b c)
// upper-alpha (A B C)

@mixin list-counter($counter-style: lower-alpha, $dot: null) {
    list-style: none;
    counter-reset: my-counter;
    > li {
        position: relative;
        &:before {
            @if $dot {
                content: counter(my-counter, $counter-style) '.';
            }
            @else {
                content: counter(my-counter, $counter-style);
            }
            counter-increment: my-counter;
            position: absolute;
            left: 0;
            top: -5px;
            @content;
        }
    }
}


// Background image

$image-path: '../img' !default;
$fallback-extension: 'png' !default;
$retina-suffix: '@2x';
@mixin background-image($name, $size:false){
    background-image: url(#{$image-path}/#{$name}.svg);
    @if($size){
        background-size: $size;
    }
    .no-svg &{
        background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});

        @media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
          background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension});
        }
    }
}

// Transition:
@mixin transition ($property: $default-tr-property, $duration: $default-tr-duration, $function: $default-tr-function, $delay: 0s) {
    transition: $property $duration $function;
    transition-delay: $delay;
}


// bg Image

$path-images: '../images';

@mixin bgi ( $image-name, $image-folder: $path-images, $width: null, $height: $width) {
    background-image: url(#{$image-folder}/#{$image-name});
    background-repeat: no-repeat;
    @if  {
        width: $width;
        height: $width;
    }
    @if $width and $height {
        width: $width;
        height: $height;
    }
}

@mixin icon-content($unicode) {
    content: "\#{$unicode}"
}